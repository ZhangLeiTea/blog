【回调函数】
# 同步的应用
    # 回调函数作为函数指针传入被调用函数，当被调用函数执行完成后调用传入的回调函数
    # 这样的作用是外界可以自定义要执行的函数，只要符合函数签名即可
    # 回调函数是在某些条件下触发的，不同的条件回调函数的参数不同
    # 所谓的同步应用指的是在同一线程的应用，即在同一线程中调用函数A()并传入回调函数callback()
        # 同一线程的函数都是栈式调用的，
        # 这样传入回调函数有什么作用呢？通知调用方函数执行的情况，如果是这个作用，那函数返回值也能实现
            # 用途？ 被调用函数在执行的时候，在某些特定的条件下需要执行某些操作，而这些操作不是固定的，
              也就是说用户可以自定义，那么这时候回调函数就起作用了
    # 同步的应用，用的少
    
# 异步的应用
    # 多线程
        # 工作线程调用回调函数： 例如开启一个线程执行一个task，当工作线程执行完成后调用回调函数
        # 主线程在工作线程执行完task时，主线程调用回调函数
            # 队列的策略
                # 主线程维持一个帧循环（帧循环--socket收发包，各种队列检测，执行存储，日志，统计处理，执行指令队列里的指令）
                # 主线程发起一个异步调用，异步调用是一个四元组 （请求id，回调函数，超时函数，超时时间），现将这个四元组写入到
                一个大类的回调队列中，然后开启工作线程执行任务，并将四元组的[请求id]传入工作线程，当工作线程完成task后，
                将[请求id]写入到已完成队列
                # 主线程在帧循环中检测回调已完成队列，拿到[请求id]找到对应的回调函数并执行
            # 事件循环的策略
    # 网络的应用
        # 阻塞IO
            
        # 非阻塞IO
            # 在同一线程中，例如只有主线程
            # 主线程维持一个帧循环
            # socket要发起一个请求，会先生成一个请求ID，并将请求ID作为包的一部分发给服务器
            # socket收到回包，回包中会带着请求ID ---- 这是关键
            # socket将回包放到收包队列中
            # 帧循环处理收包队列，拿到请求ID找到对应的回调函数，并调用

        # 网络处理回调的关键---生成请求ID，回包要带请求ID

http client 回调函数模型---socket实现http协议
# socket采用非阻塞IO
# 主线程帧循环检测connected-socket是否有数据
# 每一个HTTP请求，都会建立一个HTTP-socket链路
# 模拟get请求，就是socket发送get请求的协议内容
    GET 文件 HTTP/1.0\r\nHost: 主机\r\nConnection: Close\r\n\r\nConnection
# 从socket中获取数据，直到将数据获取完，标志为空行之后有一个空行
# socket描述符找到对应的处理对象（针对这个socket包装的处理对象），每次从socket读取数据就写到处理对象中（从内核中取出数据到用户态）
# 取完之后，调用回调函数
# 对于超时的处理
    # HTTP的超时处理很有意思
    # 根据其短连接，每个请求建立一个连接的特点，将http请求对象放到一个CHttpManager里，通过帧循环每个一点时间检测是否超时，若超时直接socket-disconnect
        