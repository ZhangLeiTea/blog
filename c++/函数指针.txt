https://isocpp.org/wiki/faq/pointers-to-members


1、类型

int f(char a, float b);
针对上述函数声明，函数的类型分为2类
1）常规函数、类静态函数
int (*)(char,float)

2) 类Fred的成员函数
int (Fread::*)(char,float)


2、能不能传递成员函数指针作为回调函数、信号处理函数、线程函数
答案是不能。因为成员函数就意味着没有调用该函数的对象，你不能直接使用成员函数。

那怎么办呢？有几种方式
1）传递对象的引用，自然而然的就包含了需要的函数甚至更多的功能
2）用top-level函数封装，对象指针作为top-level函数的参数传递进去，在函数内部再调用对象的成员函数
3）c11的functor和lambda表达式，其本质是传递对象的引用
4）用类静态函数封装，较（2）该方法更常用


3、类成员函数指针  和  函数指针
1）这两者是完全不同的，类成员函数指针是C++的产物
2）类成员函数指针必须要由对象来调用
3）很多C情况下的回调函数、信号处理函数等，就需要top-level函数或者类静态函数来作为中间函数


4、调用
1）.*    ->*
2)使用std::invoke  或者   宏定义


4、函数指针和数据指针
1）void* 是数据指针
2）函数指针和数据指针是不可比较的。这2中指针是放在不同的地址空间中的，不同地址空间中的指针类型不具有可比较性
3）不要将函数指针转成void*



6、指针和数组
