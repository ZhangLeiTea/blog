1、并发
	- 抢占式多线程		多线程编程
	- 非抢占式多线程	协程
	
2、上下文 context


3、控制流
	- 协程
		- 协程的call hierarchy中随意跳转控制流
		- 多个协程可任意跳转控制流
		- 协程跟线程不一样，控制流是显式让出的，而不是由调度器来抢占式调度的
		- yield/resume  挂起/重入一个协程
		- 认为对切换点加以控制。例如在IO阻塞的地方切换，在得到 IO结果后再重入
		- 协程的特点在于是一个线程执行
		- 协程看上去也像子程序，在一个子程序中中断，去执行其他子程序，不是函数调用，有点类似CPU的中断
	- 多线程
		- 控制流只能在单一线程之间跳转
		- 控制流不能跨线程
		- 需要内核调度器来控制多线程的并发
		- 控制流是函数级的，只能从 函数调用、return处 交换控制流
		- 子程序，或者称为函数。子程序调用是通过栈实现的，一个线程就是执行一个子程序。
		- 子程序调用总是一个入口，一次返回，调用顺序是明确的
		
		
		
4、协程优势
看起来A、B的执行有点像多线程，但协程的特点在于是一个线程执行，那和多线程比，协程有何优势？

最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。

第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。


5、因为协程是一个线程执行，那怎么利用多核CPU呢？
	- 最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。