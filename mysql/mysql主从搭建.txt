replication的思想
a. Replication的思想是将数据在集群的多个节点同步、备份

##1、主从复制解决的问题  master-slave replication
a. 备份 
  slave可以主动停止replication进程并且不会影响master，这样就能从slave进行数据备份
b. 容灾
c. 高可用（可在持续时间内提供服务） 主-主mode 
d. 读写分离  提升了集群整体的并发能力
  - 让一些非实时的读操作转移到slave上
  - 对并行的多个读、写请求加速。对于1主-3从对照单机MySQL来说，同样的10个写150个读（并行来了160个请求），如果是单机并行执行160个事务有很多的加锁操作，
例如一个select锁住了这个表，那么写操作就要等待解锁，这会导致请求延时；如果换成是1主-3从，写变成了40个（因为一共4台机都
需要写）读还是150个，被分摊到3台从服务器，那么这样单机就是10写50读，当读减少后锁操作就会减少，反过来又会加速写的速度
  - 事务性读+任意写都在主服务器上，非事务性读放到从服务器上。
  
##2、主从复制的局限
a. 没法自动路由数据库请求
  - 需要再增加mysql_proxy来增加请求路由
b. 对读写比高的应用提升性能，并未增加写的性能


##3、复制模式（Replication models）
replication支持两种模式：asynchronous（异步）、semi-synchronous（半同步）；“synchronous”复制只有Cluster才支持，本文不做介绍。复制模式会对数据完整性有很大影响。
a. Asynchronous复制
  - 这是replication的默认模式，在master上提交的updates操作执行成功且写入binlog之后，master继续处理其他的write请求，而不会等待slaves对此update信息的复制或者应用；此后的任何时候，slaves均可以与master建立链接并复制那些尚未获取的变更日志，然后在本地应用（apply）。
  - 不过这种模式，slaves总有一定的延后，这种延后在事务操作密集的应用中更加明显，不过通常这种延后时间都极其短暂的。从另一个方面来说，异步方式不要求slaves必须时刻与master建立链接，可能slaves离线、中断了replication进程或者链接的传输延迟很高，这都不会影响master对writes请求的处理效率。比如对于“远距分布”的slaves，异步复制是比较好的选择。
此模式下，如果master失效，我们通常的做法是重启master，而不是failover到其他的slave，除非master无法恢复；因为master上会有些updates尚未复制给slaves，如果此时failover则意味着那些updates将丢失。

b. semi-synchronous（半同步)
半同步”并不是MySQL内置的replication模式，而且由插件实现，即在使用此特性之前，需要在master和slaves上安装插件，且通过配置文件开启“半同步”。当slave与master建立连接时会表明其是否开启了“半同步”特性；此模式正常运作，需要master和至少一个slaves同时开启，否则仍将采用“异步”复制。
在master上执行事务提交的线程，在事务提交后将会阻塞，直到至少一个“半同步”的slave返回确认消息（ACK）或者所有的半同步slave都等待超时；slave将接收到事务的信息写入到本地的relay log文件且flush到磁盘后，才会向master返回确认消息，需要注意slave并不需要此时就执行事务提交，此过程可以稍后进行。当所有的半同步slaves均在指定的时间内没有返回确认消息，即timeout，那么此后master将转换成异步复制模式，直到至少一个半同步slave完全跟进才会转换为半同步模式。在master阻塞结束后才会返回给客户端执行的状态，此期间不会处理其他的事务提交，当write请求返回时即表明此操作在master上提交成功，且在至少一个半同步slaves也复制成功或者超时，阻塞超时并不会导致事务的rollback。（对于事务性的表，比如innodb，默认是事务自动提交，当然可以关闭“autocommit”而手动提交事务，它们在replication复制机制中并没有区别）
半同步模式需要在master和slaves上同时开启，如果仅在master上开启，或者master开启而slaves关闭，最终仍然不能使用半同步复制，而是采用异步复制。
与异步复制相比，半同步提高了数据一致性，降低了数据丢失的风险。但是它也引入了一个问题，就是master阻塞等待slaves的确认信息，在一定程度上降低了master的writes并发能力，特别是当slaves与master之间网络延迟较大时；因此我们断定，半同步slaves应该部署在与master临近的网络中，为了提高数据一致性，我们有必要将半同步作为replication的首选模式。
在实际的部署环境中，并不要求所有的slaves都开启半同步，我们可以将与master临近的slaves开启半同步，将那些“远距分布”的slaves使用异步。


##4、复制的原理


##5、binlog格式
##3、MySQL fabric
a. failover 故障修复
b. router 	数据库请求路由


## 连接

https://www.cnblogs.com/clsn/p/8150036.html



问题：
一、备份spider节点是可行的，但是mysqldump master,将数据备份到slave之后，以前在spider节点的表中能查到的数据在slave节点中查不到了？？？
但是如果以后在master的spider节点插入数据，能反映到slave中。
在spider-slave中插入数据不会影响data节点，成本地数据库了，将所有的分区整合到了*.ibd中