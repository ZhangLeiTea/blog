【字符串--二进制数据的关系】
# 首先数据可以分为文本数据（字符串）和二进制数据（data数据）
# 字符---人类能理解的 ---->  编码（utf8）---计算机能理解的
    # 字符集就是人类能看懂的表示，实际就是编码的文本表示，也就是二进制数据的文本表示
    # 例如字符 ‘0’，ASCII-ANSI-Utf8的编码都是 48(一个字节)，编码就是存储在内存和硬盘的二进制数据
    # 字符串 “12345678”，Utf8就需要8个字节来存储
    # [0-9][A-Z]注意这些都是字符
# 人类能理解的是字符---可打印字符++控制字符
# 计算机能理解的是 字符编码 ， 数值编码。所以需要将字符编码、数值编码转成字符


【struct模块】
# 将Python的类型细化成字节表示


【二进制数据的抽象】
# 二进制数据就是存储在内存的字节序列
# 如何抽象这些字节序列呢
    # 抽象的目的就是为了能理解这些字节序列表示的是什么东西
    # 可以抽象成字符、字符串
        # 这就涉及到了编码的问题，几个byte表示一个字符，byte对应的是哪个字符啊
        # 字符集：为每一个「字符」分配一个唯一的 ID（学名为码位 / 码点 / Code Point）
        # 编码规则：将「码位」转换为字节序列的规则（编码/解码 可以理解为 加密/解密 的过程）
        # Unicode字符集-规定了码值同字符的对应关系，如码值48表示字符‘0’
        # ANSI字符集的”Ascii”编码，ANSI字符集的GBK编码，Unicode字符集的utf8/utf16编码
    # 可以抽象成数值
        # 抽象成int/float/
        # 将4个字节抽象成int，注意4个字节抽象成int后表示12345678，这是个数值，计算机能理解，但当
          向人类展示的时候，必须将数值转换成文本表示“12345678”这时候就成了字符串，具体占多少字节得看
          采用了什么编码。这也就是【字符串格式化函数】的作用及由来
        # 字符串格式化函数的目的，就是将二进制数据转成其文本表示（字符串），计算机再根据编码规则将这些字符串编码转成我们能看懂的字符


【py- # -*- encoding=utf8 -*-】
# 作用：表示此py文件使用的是utf8编码，当py解释器加载该文件时，就会用utf8去解码该文件的内容
# decode应该有两个作用
    # 根据编码规则解码字节数据，将其解码成字符串。字节--->字符
    # 



【字符串表示方式】
u'\u'
b'\x'   字节表示，二进制表示
'张磊'  有一个默认的转换  '张磊'.decode('utf8')

‘张磊’.encode('utf8')
# 在Python的内存世界中，所有的字符都是用Unicode编码的
    # 最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）
# pytho的默认编解码是ascii
# 当你用cmd运行python时，你需要自己处理编码，中国的cmd输入中文就是gbk编码
    # 执行>>>‘张磊’.decode('gbk')，输出为 【u'\u5f20\u78ca'】，这佐证了Python的内存使用Unicode编码的
    # '张磊'.encode('utf8')会报错。原因是执行了多余的操作，'zhanglei'.decode('ascii').encode('utf8')  默认的编解码器是ASCII，

# 文件中指明  # -*- encoding=utf8 -*-
    # py解释器在加载该py文件时，对文本执行了 decode()的操作，decode使用了默认的编码器ascii，此时如果有非ascii的字符（超过128）
      解释器就会报错，当你加了上述声明，那么解释器就会执行 decode('utf8')的操作，注意此时要求文件保存的编码格式也是utf8.
    # py文件.decode('utf8') 将文件的utf8编码转成了py内存世界的Unicode编码
    # 当你执行print str；这类输出语句的时候，py解释器默认执行了转换 print(str.decode('utf8'))
    # len(str)时，默认执行了 len(str.encode('utf8'))
    # 