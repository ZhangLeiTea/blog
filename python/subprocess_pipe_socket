1、主要阐述
  1）python的subprocess模块Popen类的使用，及进程stdin/stdout/stderr的解释
  2）linux-pipe的理解及pipe作为Popen:stdout的使用
  3）Linux通过pipe作进程间通信，并将pipe一端的输出作为socket的输入用于socket传输数据
  4）tcp-socket传输数据的一种方式：附带标志，例如 【数据开始传输标志，数据大小，数据传输完成标志】，这些对标志的限定就像是在制定应用层协议
  
2、示例约束
  1）hostA（192.168.1.2）需要hostB（192.168.1.3）上的MySQL的备份文件，即hostA向hostB发起备份请求，hostB将备份文件传输给hostA
  2）hostA和hostB通过socket通信，hostB上运行守护进程serviced用于接收来自hostA的命令
  3）hostB通过pipe和mysqldump通信，实时获取MySQLdump的输出，将该输出传输给hostA
  
3、问题分析
  1）hostB作为mysqld的运行服务器，其本身磁盘空间可能相对比较紧张，如果先用mysqldump将数据库备份到sql文件中，sql文件可能会占用很多磁盘空间，而且这个sql文件在传输到hostA之后就要删除了，没有必要在hostB上先生成文件
  --解决：
    (1) hostB上有2个进程，serviced和mysqldump，那么问题就变成了2个进程如何通信的问题，参照《unp-进程间通信》有这么几种方式：文件系统、网络、管道、named pipe、消息队列等，文件系统：可以在serviced中开启子进程mysqldump并将mysqldump输出到一个sql文件（文件系统）中，等待子进程mysqldump完成后，serviced在读取sql文件内容并通过socket传输给hostA；管道：子进程mysqldump作为管道的输入端，serviced作为管道的输出（读取）端并将读取的数据直接通过socket传输给hostA;  
       综上来看，管道正是我们想要的

  2) 如何感知管道的输入端进程的状态（正确完成还是出现了异常）
    -- 解决
      (1) 进程有四个关键内容：标准输入stdin，标准输出stdout，标准异常stderr，进程返回码
          stdin: 程序可以从标准输入读取数据库，例如c++的std::cin，stdin是可以重定向的例如可以重定向到文件
          stdout: 子进程输出的数据就是输出到标准输出中的
          stderr: 错误输出。就是为了跟数据（data）的输出区分开来
          进程返回发：0-表示成功；非0-失败。例如exit(0),exit(1)里的0/1就是当进程退出时进程的状态
          
          从上述来看，我们有2个途径感知子进程是否正常，stderr与进程返回码。stderr输出的不光是错误，有时候警告也在这输出，所有不能准确判定进程的正确性
          ；进程返回码能够准备的表明进程是否出现了错误，这正是我们想要的
          
  3）要将数据传输给hostA，又要在hostB上的管道端子进程出错的时候通知hostA我出错了（hostA能感知hostB的错误
    -- 解决：
      (1) 由此来看我们需要设计socket的数据格式（应用层数据格式），socket-stream数据格式一般有2中定式：数据长度+data；data+数据结束标记。这2中定式处
          理的是同一个问题：流数据的粘包问题（如何界定哪些数据是一个完整的数据包，完整数据包的含义是应用层协议能够正确解析的数据段，例如http协议将
          \n\n用作header的结束标记，只有遇到了整个标记HTTP协议才知道header接受完了我可以按照既定协议来解析收到的二进制数据了）
      (2) 为什么需要设计socket的数据格式？如问题所示hostB要能区分出不同的数据类型：正常数据、错误信息；由于是管道MySQLdump到底输出多少正常数据，
          我们是不知道的，同样在接收端hostB也存在一个问题：我如何区分哪些是正常数据哪些是错误信息呢？这个问题有多重处理，我们这里采用的方案是设计
          应用层数据格式，并采用数据长度+data的形式来设计每个数据包
      (3) 数据格式的设计：[ 包类型(1byte)|数据长度(4bye)|数据 ] 这就是我们的格式。
            包类型：
                1-  代表正常数据包 （common_data）
                2-  错误信息
                3-  正常数据的md5
                100-  数据开始传输的标记。这种包类型不带数据
                101-  数据完成传输的标志。
                
                
4、py代码
（1）hostA命令发起端及数据接收端

（2）hostB数据产生端
