1、类型
  1）值类型（不可变对象）：
      -- 数值、字符串、元组、bool
      -- 本身不允许修改
      -- 
  2）引用类型（可变对象）：
      -- list、set、dict、object
      
  3）总结：
    在py中变量永远都是指针，但不同的类型做出来区分值类型或者引用类型，这2者的本质是：是否可以修改自身（相当于C++中指针和const 指针的区别）


2、变量的理解
  1）需要确认变量指向的类型
  2）=赋值运算符。a = 'zhanglei'。只要是赋值运算：申请新的内存空间，变量名指向这个新的内存空间
  
2.1 赋值运算符
  1）只要是赋值运算：第一步-申请新的内存空间，第二部-变量名指向这个新的内存空间
  
3、参数传递
  1）py中参数的传递都是指针（引用），区别是这个对象是可变对象还是不可变对象
      def test_immutable_for_simpledata(args):
        print('============')
        print(2, id(args))
        args = args + 10
        print(3, args)
        print(4, id(args))
        print('============')


      if __name__ == '__main__':
        cur = 5000
        print(1, id(cur))
        test_immutable_for_simpledata(cur)
        print(5, cur)
        print(6, id(cur))
  2）原则
    -- Python对不可变类型传参是使用的引用传参
    -- 基本类型的不可变对象，对它进行运算操作其实就是创建新的对象，然后将原先的变量名绑定到新的对象上
    
4、名字空间
  1）py中万物皆对象，对象是通过key-values的形式索引的。
  2）变量的作用域：
      -- 全局变量：以module为界，可以将module看做是C++的名字空间
      -- 局部变量：只有函数级没有块级作用域
  3）import test_a
      -- 上面语句的作用：将'test_a'这个key放到了这个模块的__dict__里（可以用globals()获取）其value呢就是test_a这个模块（可以看到它的类型是
         module）
  4) from test_a import name
      -- 该模块的globals里添加了'name'这个key，可以说加了'name'这个变量
      -- 这个name变量能不能改，就看是不是可变的
      -- 对这个变量的赋值，不论是否可变，都是重新分配内存，让后变量指向新的内存
